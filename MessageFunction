
#include "FastLED.h"

#define NUM_LEDS 200
#define DATA_PIN 4

CRGB leds[NUM_LEDS];

/* ***** TIMER VARIABLES ***** */
unsigned long previousMillis1, previousMillis2, previousMillis3, previousMillis4, previousMillis5;
bool message = false,message1 = false, message2 = false, message3 = false, message4 = false;
int sendmessage = 0;

int interval1 = 1000;
int interval2 = 1000;
int interval3 = 1000;
int interval4 = 1000;

/* ***** LED STRIP PARAMETERS ***** */
int StripIndex1 = 0;
int StripIndex2 = 15;
int StripIndex3 = 30;
int StripIndex4 = 45;
int StripIndexSum = 60;

int StripEnd1 = 14;
int StripEnd2 = 29;
int StripEnd3 = 44;
int StripEnd4 = 59;
int StripEndSum = NUM_LEDS;

byte color = 96;
byte saturation = 255;

void setup() {
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  pinMode(DATA_PIN, OUTPUT);
  Serial.begin(9600);
  message = false;
}

void loop() {

if(message == true)
{
Serial.print("Success.");
fill_solid( leds, NUM_LEDS, CRGB(0,0,0));

}
else if(message == false)
{
Message(&StripIndex1 , &StripEnd1, color, &message1, &previousMillis1, saturation, &interval1);
Message(&StripIndex2 , &StripEnd2, color, &message2, &previousMillis2, saturation, &interval2);
Message(&StripIndex3 , &StripEnd3, color, &message3, &previousMillis3, saturation, &interval3);
Message(&StripIndex4 , &StripEnd4, color, &message4, &previousMillis4, saturation, &interval4);
}

}

 void Message(int *StripIndex, int *StripEnd, byte color, bool message, unsigned long *previousMillis, int saturation, int *interval)
{
  //leds[*StripEnd] = CRGB::Black;
  if (millis() - *previousMillis >= *interval)
  {
    
  }
      if(*StripIndex < *StripEnd)
      {
        *StripIndex+=1;  
      }
      else  if(*StripIndex >= *StripEnd)
      {
        *StripIndex = StripIndexSum;
        *StripEnd = StripEndSum;
        if(*StripIndex < StripEndSum)
        {
          *StripIndex+=1;
          return message == false;
        }
        if(*StripIndex == 200 )
        {
          return message == true;
        }
       }
  
  leds[*StripIndex] = CHSV(color, saturation, 100);
  leds[*StripIndex - 1] = CRGB::Black;
  leds[*StripEnd] = CRGB::Black;
  FastLED.show();

  *previousMillis = millis();
}
